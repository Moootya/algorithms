

def quick_sort(arr: list, left: int, right: int):
    """
    :param arr: Список для сортировки
    :param left: Левый индекс массива для сортровки
    :param right: Правый индекс массива для сортровки
    :return: Сортирует список на месте
    """

    # Если есть что сортировать
    if left < right:

        # Смена порядка элементов массива
        pivot = partition(arr, left, right)

        # Вызвать сортировку для элементов меньше опрного
        quick_sort(arr, left, pivot - 1)

        # Вызвать сортировку для элементов больше опортного
        quick_sort(arr, pivot, right)


def partition(arr: list, left: int, right: int) -> int:  # ~O(n)
    """
    Изменение порядка элементов массива без привлечения дополнительной памяти

    :param arr: Список для сортировки
    :param left: Левый индекс массива для разделения
    :param right: Правый индекс массива для разделения
    :return: Индекс опорного элемента
    """

    # Последний элемент массива
    pivot = arr[right]

    # Попадание в отрицательный индекс
    i = left - 1

    # Начать обход массива с -1 по предпоследний индекс массива
    for j in range(left, right):

        # Если некоторый элемент из массива меньше, чем опорный (последний)
        if arr[j] <= pivot:

            # Прибавить индекс для следующего меньшего жлемента, чем опорный
            i += 1

            # Поменять местами элемент из массива и тот, что меньше опрного
            arr[i], arr[j] = arr[j], arr[i]

    # Поменять местами опроный элемент и элемент, который находится между двумя областями
    arr[i + 1], arr[right] = arr[right], arr[i + 1]

    # Вернуть новый индекс опортного элемента
    return i + 1


if __name__ == '__main__':

    arr = [2, 8, 7, 1, 3, 5, 6, 4]
    print(arr)

    # partition(arr, 0, len(arr) - 1)

    quick_sort(arr, 0, len(arr) - 1)
    print(arr)








#